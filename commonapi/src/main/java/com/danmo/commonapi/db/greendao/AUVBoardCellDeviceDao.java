package com.danmo.commonapi.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.danmo.commonapi.db.entity.AUVBoardCellDevice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUVBOARD_CELL_DEVICE".
*/
public class AUVBoardCellDeviceDao extends AbstractDao<AUVBoardCellDevice, Void> {

    public static final String TABLENAME = "AUVBOARD_CELL_DEVICE";

    /**
     * Properties of entity AUVBoardCellDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CellNo = new Property(0, int.class, "cellNo", false, "CELL_NO");
        public final static Property CellLockOpen = new Property(1, boolean.class, "cellLockOpen", false, "CELL_LOCK_OPEN");
        public final static Property CellLightOpen = new Property(2, boolean.class, "cellLightOpen", false, "CELL_LIGHT_OPEN");
        public final static Property CellGoodsExist = new Property(3, boolean.class, "cellGoodsExist", false, "CELL_GOODS_EXIST");
        public final static Property DeviceNo = new Property(4, String.class, "deviceNo", false, "DEVICE_NO");
        public final static Property PartNo = new Property(5, String.class, "partNo", false, "PART_NO");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property EndTime = new Property(7, String.class, "endTime", false, "END_TIME");
        public final static Property PerNo = new Property(8, String.class, "perNo", false, "PER_NO");
        public final static Property ReturnTime = new Property(9, String.class, "returnTime", false, "RETURN_TIME");
        public final static Property BorrowTime = new Property(10, String.class, "borrowTime", false, "BORROW_TIME");
        public final static Property IsGoodOrFail = new Property(11, boolean.class, "isGoodOrFail", false, "IS_GOOD_OR_FAIL");
    }


    public AUVBoardCellDeviceDao(DaoConfig config) {
        super(config);
    }
    
    public AUVBoardCellDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUVBOARD_CELL_DEVICE\" (" + //
                "\"CELL_NO\" INTEGER NOT NULL ," + // 0: cellNo
                "\"CELL_LOCK_OPEN\" INTEGER NOT NULL ," + // 1: cellLockOpen
                "\"CELL_LIGHT_OPEN\" INTEGER NOT NULL ," + // 2: cellLightOpen
                "\"CELL_GOODS_EXIST\" INTEGER NOT NULL ," + // 3: cellGoodsExist
                "\"DEVICE_NO\" TEXT," + // 4: deviceNo
                "\"PART_NO\" TEXT," + // 5: partNo
                "\"NAME\" TEXT," + // 6: name
                "\"END_TIME\" TEXT," + // 7: endTime
                "\"PER_NO\" TEXT," + // 8: perNo
                "\"RETURN_TIME\" TEXT," + // 9: returnTime
                "\"BORROW_TIME\" TEXT," + // 10: borrowTime
                "\"IS_GOOD_OR_FAIL\" INTEGER NOT NULL );"); // 11: isGoodOrFail
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_AUVBOARD_CELL_DEVICE_CELL_NO ON \"AUVBOARD_CELL_DEVICE\"" +
                " (\"CELL_NO\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUVBOARD_CELL_DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AUVBoardCellDevice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCellNo());
        stmt.bindLong(2, entity.getCellLockOpen() ? 1L: 0L);
        stmt.bindLong(3, entity.getCellLightOpen() ? 1L: 0L);
        stmt.bindLong(4, entity.getCellGoodsExist() ? 1L: 0L);
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(5, deviceNo);
        }
 
        String partNo = entity.getPartNo();
        if (partNo != null) {
            stmt.bindString(6, partNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
 
        String perNo = entity.getPerNo();
        if (perNo != null) {
            stmt.bindString(9, perNo);
        }
 
        String returnTime = entity.getReturnTime();
        if (returnTime != null) {
            stmt.bindString(10, returnTime);
        }
 
        String borrowTime = entity.getBorrowTime();
        if (borrowTime != null) {
            stmt.bindString(11, borrowTime);
        }
        stmt.bindLong(12, entity.getIsGoodOrFail() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AUVBoardCellDevice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCellNo());
        stmt.bindLong(2, entity.getCellLockOpen() ? 1L: 0L);
        stmt.bindLong(3, entity.getCellLightOpen() ? 1L: 0L);
        stmt.bindLong(4, entity.getCellGoodsExist() ? 1L: 0L);
 
        String deviceNo = entity.getDeviceNo();
        if (deviceNo != null) {
            stmt.bindString(5, deviceNo);
        }
 
        String partNo = entity.getPartNo();
        if (partNo != null) {
            stmt.bindString(6, partNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
 
        String perNo = entity.getPerNo();
        if (perNo != null) {
            stmt.bindString(9, perNo);
        }
 
        String returnTime = entity.getReturnTime();
        if (returnTime != null) {
            stmt.bindString(10, returnTime);
        }
 
        String borrowTime = entity.getBorrowTime();
        if (borrowTime != null) {
            stmt.bindString(11, borrowTime);
        }
        stmt.bindLong(12, entity.getIsGoodOrFail() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AUVBoardCellDevice readEntity(Cursor cursor, int offset) {
        AUVBoardCellDevice entity = new AUVBoardCellDevice( //
            cursor.getInt(offset + 0), // cellNo
            cursor.getShort(offset + 1) != 0, // cellLockOpen
            cursor.getShort(offset + 2) != 0, // cellLightOpen
            cursor.getShort(offset + 3) != 0, // cellGoodsExist
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // partNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // endTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // perNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // returnTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // borrowTime
            cursor.getShort(offset + 11) != 0 // isGoodOrFail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AUVBoardCellDevice entity, int offset) {
        entity.setCellNo(cursor.getInt(offset + 0));
        entity.setCellLockOpen(cursor.getShort(offset + 1) != 0);
        entity.setCellLightOpen(cursor.getShort(offset + 2) != 0);
        entity.setCellGoodsExist(cursor.getShort(offset + 3) != 0);
        entity.setDeviceNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPartNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPerNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReturnTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBorrowTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsGoodOrFail(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AUVBoardCellDevice entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AUVBoardCellDevice entity) {
        return null;
    }

    @Override
    public boolean hasKey(AUVBoardCellDevice entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
